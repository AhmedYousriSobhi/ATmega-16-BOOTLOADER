
UART_APPLICATION.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  000000de  00000152  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006df  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000609  00000000  00000000  00000917  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000232  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001154  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000348  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b7  00000000  00000000  00001500  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000015b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ed       	ldi	r30, 0xDE	; 222
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  7a:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_Init>:
}

void USART_Init( uint16_t baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
  82:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
  84:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
  86:	88 e1       	ldi	r24, 0x18	; 24
  88:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
  8a:	86 e8       	ldi	r24, 0x86	; 134
  8c:	80 bd       	out	0x20, r24	; 32
  8e:	08 95       	ret

00000090 <USART_Transmit>:
}

void USART_Transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
  90:	5d 9b       	sbis	0x0b, 5	; 11
  92:	fe cf       	rjmp	.-4      	; 0x90 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  94:	8c b9       	out	0x0c, r24	; 12
  96:	08 95       	ret

00000098 <USART_Transmit_Msg>:
}

void USART_Transmit_Msg(uint8_t *word )
{
  98:	0f 93       	push	r16
  9a:	1f 93       	push	r17
  9c:	cf 93       	push	r28
  9e:	8c 01       	movw	r16, r24
	uint8_t index = 0;
  a0:	c0 e0       	ldi	r28, 0x00	; 0
	while(word[index] != '\n')
  a2:	f8 01       	movw	r30, r16
  a4:	ec 0f       	add	r30, r28
  a6:	f1 1d       	adc	r31, r1
  a8:	80 81       	ld	r24, Z
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	21 f0       	breq	.+8      	; 0xb6 <USART_Transmit_Msg+0x1e>
	{
		USART_Transmit(word[index++]);
  ae:	cf 5f       	subi	r28, 0xFF	; 255
  b0:	0e 94 48 00 	call	0x90	; 0x90 <USART_Transmit>
  b4:	f6 cf       	rjmp	.-20     	; 0xa2 <USART_Transmit_Msg+0xa>
	}
	USART_Transmit('\n');
	
  b6:	cf 91       	pop	r28
  b8:	1f 91       	pop	r17
  ba:	0f 91       	pop	r16
	uint8_t index = 0;
	while(word[index] != '\n')
	{
		USART_Transmit(word[index++]);
	}
	USART_Transmit('\n');
  bc:	0c 94 48 00 	jmp	0x90	; 0x90 <USART_Transmit>

000000c0 <main>:
void USART_Transmit_Msg(uint8_t *word );
uint8_t messege[]= "HELLO FROM APPLICATION\n";

int main(void)
{
    USART_Init(12); // setting baudrate to 4800
  c0:	8c e0       	ldi	r24, 0x0C	; 12
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e 94 41 00 	call	0x82	; 0x82 <USART_Init>
    while (1) 
    {
		USART_Transmit_Msg((uint8_t *)"HELLO FROM APPLICATION\n");
  c8:	80 e6       	ldi	r24, 0x60	; 96
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 4c 00 	call	0x98	; 0x98 <USART_Transmit_Msg>
		USART_Transmit_Msg((uint8_t *)"YOU HAVE DONE YOUR FIRST BOOTLOADER CODE\n");
  d0:	88 e7       	ldi	r24, 0x78	; 120
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 4c 00 	call	0x98	; 0x98 <USART_Transmit_Msg>
  d8:	f7 cf       	rjmp	.-18     	; 0xc8 <main+0x8>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
